bool canConstruct(char* ransomNote, char* magazine) {
    int ransomNote_arr[26] = {0} , magazine_arr[26] = {0};
    for( int i = 0 ; i < strlen(ransomNote) ; i++)
        ransomNote_arr[ransomNote[i] - 'a']++;
    for( int i = 0 ; i < strlen(magazine) ; i++)
        magazine_arr[magazine[i] - 'a']++;
    for( int i = 0 ; i < 26 ; i++)
        if((ransomNote_arr[i] > magazine_arr[i]))
            return 0;
    return 1;
}


--------------------------------------------------------------------------------------------------------------


bool canConstruct(char * ransomNote, char * magazine){
    int map[26] = {0}; // create a map to store the frequency of char in ransomNote
    // check what is in ransomNote and magazine
    while(*ransomNote)
    {
        map[*ransomNote - 'a']++;
        ransomNote++;
    }
    while(*magazine)
    {
        map[*magazine - 'a']--;
        magazine++;
    }
    for(int i = 0 ; i < 26 ; i++) // check if frequency of any char in ransomNote is greater than in magazine
        if (map[i] > 0) 
            return 0;
    return 1;
}


-------------------------------------------------------------------------------------------------------------------


bool canConstruct(char * ransomNote, char * magazine){
    int letters[26] = {0};
    for (int i = 0; magazine[i] != '\0'; i++)
        letters[magazine[i] - 'a']++;
    for (int i = 0; ransomNote[i] != '\0'; i++) 
    {
        if (letters[ransomNote[i] - 'a'])
            letters[ransomNote[i] - 'a']--;
        else
            return 0;
    }
    return 1;
}


--------------------------------------------------------------------------------------------------------------------


bool canConstruct(char * ransomNote, char * magazine){
    int table[26] = {0};
    while (*magazine) 
        table[*magazine++ - 'a']++;
    while (*ransomNote)
    {
		if (!table[*ransomNote - 'a']) 
            return 0;
        table[*ransomNote++ - 'a']--;
    }
    return 1;
}
